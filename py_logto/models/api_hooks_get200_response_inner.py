# coding: utf-8

"""
    Logto API references

    API references for Logto services. To learn more about how to interact with Logto APIs, see [Interact with Management API](https://docs.logto.io/docs/recipes/interact-with-management-api/).

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from py_logto.models.api_hooks_get200_response_inner_config import ApiHooksGet200ResponseInnerConfig
from py_logto.models.api_hooks_get200_response_inner_execution_stats import ApiHooksGet200ResponseInnerExecutionStats
from typing import Optional, Set
from typing_extensions import Self

class ApiHooksGet200ResponseInner(BaseModel):
    """
    ApiHooksGet200ResponseInner
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True, max_length=21)]
    name: Annotated[str, Field(strict=True, max_length=256)]
    event: Optional[StrictStr]
    events: List[StrictStr]
    config: ApiHooksGet200ResponseInnerConfig
    signing_key: Annotated[str, Field(strict=True, max_length=64)] = Field(alias="signingKey")
    enabled: StrictBool
    created_at: Union[StrictFloat, StrictInt] = Field(alias="createdAt")
    execution_stats: Optional[ApiHooksGet200ResponseInnerExecutionStats] = Field(default=None, alias="executionStats")
    __properties: ClassVar[List[str]] = ["id", "name", "event", "events", "config", "signingKey", "enabled", "createdAt", "executionStats"]

    @field_validator('event')
    def event_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PostRegister', 'PostSignIn', 'PostResetPassword']):
            raise ValueError("must be one of enum values ('PostRegister', 'PostSignIn', 'PostResetPassword')")
        return value

    @field_validator('events')
    def events_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['PostRegister', 'PostSignIn', 'PostResetPassword']):
                raise ValueError("each list item must be one of ('PostRegister', 'PostSignIn', 'PostResetPassword')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiHooksGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_stats
        if self.execution_stats:
            _dict['executionStats'] = self.execution_stats.to_dict()
        # set to None if event (nullable) is None
        # and model_fields_set contains the field
        if self.event is None and "event" in self.model_fields_set:
            _dict['event'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiHooksGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "event": obj.get("event"),
            "events": obj.get("events"),
            "config": ApiHooksGet200ResponseInnerConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "signingKey": obj.get("signingKey"),
            "enabled": obj.get("enabled"),
            "createdAt": obj.get("createdAt"),
            "executionStats": ApiHooksGet200ResponseInnerExecutionStats.from_dict(obj["executionStats"]) if obj.get("executionStats") is not None else None
        })
        return _obj


