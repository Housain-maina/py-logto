# coding: utf-8

"""
    Python SDK for Logto API

    Python SDK for Logto API.  Note: This SDK is for Logto Cloud and OSS. However, if you are using Logto OSS, some features available in the SDK may not work for you. Please refer to the response of `/api/swagger.json` endpoint on your Logto OSS instance for features available to you.

    The version of the OpenAPI document: 1.22.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from py_logto.models.verify_web_authn_authentication_verification_request_payload_response import VerifyWebAuthnAuthenticationVerificationRequestPayloadResponse
from py_logto.models.verify_web_authn_registration_verification_request_payload_client_extension_results import VerifyWebAuthnRegistrationVerificationRequestPayloadClientExtensionResults
from typing import Optional, Set
from typing_extensions import Self

class VerifyWebAuthnAuthenticationVerificationRequestPayload(BaseModel):
    """
    The WebAuthn assertion response from the user's WebAuthn credential.
    """ # noqa: E501
    type: StrictStr
    id: StrictStr
    raw_id: StrictStr = Field(alias="rawId")
    authenticator_attachment: Optional[StrictStr] = Field(default=None, alias="authenticatorAttachment")
    client_extension_results: VerifyWebAuthnRegistrationVerificationRequestPayloadClientExtensionResults = Field(alias="clientExtensionResults")
    response: VerifyWebAuthnAuthenticationVerificationRequestPayloadResponse
    __properties: ClassVar[List[str]] = ["type", "id", "rawId", "authenticatorAttachment", "clientExtensionResults", "response"]

    @field_validator('authenticator_attachment')
    def authenticator_attachment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['cross-platform', 'platform']):
            raise ValueError("must be one of enum values ('cross-platform', 'platform')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyWebAuthnAuthenticationVerificationRequestPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_extension_results
        if self.client_extension_results:
            _dict['clientExtensionResults'] = self.client_extension_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyWebAuthnAuthenticationVerificationRequestPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "id": obj.get("id"),
            "rawId": obj.get("rawId"),
            "authenticatorAttachment": obj.get("authenticatorAttachment"),
            "clientExtensionResults": VerifyWebAuthnRegistrationVerificationRequestPayloadClientExtensionResults.from_dict(obj["clientExtensionResults"]) if obj.get("clientExtensionResults") is not None else None,
            "response": VerifyWebAuthnAuthenticationVerificationRequestPayloadResponse.from_dict(obj["response"]) if obj.get("response") is not None else None
        })
        return _obj


