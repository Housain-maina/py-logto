# coding: utf-8

"""
    Logto API references

    API references for Logto services.

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GetUser200ResponseSsoIdentitiesInner(BaseModel):
    """
    GetUser200ResponseSsoIdentitiesInner
    """ # noqa: E501
    tenant_id: Annotated[str, Field(strict=True, max_length=21)] = Field(alias="tenantId")
    id: Annotated[str, Field(min_length=1, strict=True, max_length=21)]
    user_id: Annotated[str, Field(min_length=1, strict=True, max_length=12)] = Field(alias="userId")
    issuer: Annotated[str, Field(min_length=1, strict=True, max_length=256)]
    identity_id: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(alias="identityId")
    detail: Dict[str, Any] = Field(description="arbitrary")
    created_at: Union[StrictFloat, StrictInt] = Field(alias="createdAt")
    sso_connector_id: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(alias="ssoConnectorId")
    __properties: ClassVar[List[str]] = ["tenantId", "id", "userId", "issuer", "identityId", "detail", "createdAt", "ssoConnectorId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetUser200ResponseSsoIdentitiesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetUser200ResponseSsoIdentitiesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "issuer": obj.get("issuer"),
            "identityId": obj.get("identityId"),
            "detail": obj.get("detail"),
            "createdAt": obj.get("createdAt"),
            "ssoConnectorId": obj.get("ssoConnectorId")
        })
        return _obj


