# coding: utf-8

"""
    Logto API references

    API references for Logto services. To learn more about how to interact with Logto APIs, see [Interact with Management API](https://docs.logto.io/docs/recipes/interact-with-management-api/).

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from py_logto.models.api_dashboard_users_active_get200_response_dau_curve_inner import ApiDashboardUsersActiveGet200ResponseDauCurveInner
from py_logto.models.api_dashboard_users_new_get200_response_today import ApiDashboardUsersNewGet200ResponseToday
from typing import Optional, Set
from typing_extensions import Self

class ApiDashboardUsersActiveGet200Response(BaseModel):
    """
    ApiDashboardUsersActiveGet200Response
    """ # noqa: E501
    dau_curve: List[ApiDashboardUsersActiveGet200ResponseDauCurveInner] = Field(alias="dauCurve")
    dau: ApiDashboardUsersNewGet200ResponseToday
    wau: ApiDashboardUsersNewGet200ResponseToday
    mau: ApiDashboardUsersNewGet200ResponseToday
    __properties: ClassVar[List[str]] = ["dauCurve", "dau", "wau", "mau"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiDashboardUsersActiveGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dau_curve (list)
        _items = []
        if self.dau_curve:
            for _item in self.dau_curve:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dauCurve'] = _items
        # override the default output from pydantic by calling `to_dict()` of dau
        if self.dau:
            _dict['dau'] = self.dau.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wau
        if self.wau:
            _dict['wau'] = self.wau.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mau
        if self.mau:
            _dict['mau'] = self.mau.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiDashboardUsersActiveGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dauCurve": [ApiDashboardUsersActiveGet200ResponseDauCurveInner.from_dict(_item) for _item in obj["dauCurve"]] if obj.get("dauCurve") is not None else None,
            "dau": ApiDashboardUsersNewGet200ResponseToday.from_dict(obj["dau"]) if obj.get("dau") is not None else None,
            "wau": ApiDashboardUsersNewGet200ResponseToday.from_dict(obj["wau"]) if obj.get("wau") is not None else None,
            "mau": ApiDashboardUsersNewGet200ResponseToday.from_dict(obj["mau"]) if obj.get("mau") is not None else None
        })
        return _obj


