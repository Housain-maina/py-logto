# coding: utf-8

"""
    Logto API references

    API references for Logto services. To learn more about how to interact with Logto APIs, see [Interact with Management API](https://docs.logto.io/docs/recipes/interact-with-management-api/).

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiInteractionVerificationWebauthnRegistrationPost200ResponseAuthenticatorSelection(BaseModel):
    """
    ApiInteractionVerificationWebauthnRegistrationPost200ResponseAuthenticatorSelection
    """ # noqa: E501
    authenticator_attachment: Optional[StrictStr] = Field(default=None, alias="authenticatorAttachment")
    require_resident_key: Optional[StrictBool] = Field(default=None, alias="requireResidentKey")
    resident_key: Optional[StrictStr] = Field(default=None, alias="residentKey")
    user_verification: Optional[StrictStr] = Field(default=None, alias="userVerification")
    __properties: ClassVar[List[str]] = ["authenticatorAttachment", "requireResidentKey", "residentKey", "userVerification"]

    @field_validator('authenticator_attachment')
    def authenticator_attachment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['platform', 'cross-platform']):
            raise ValueError("must be one of enum values ('platform', 'cross-platform')")
        return value

    @field_validator('resident_key')
    def resident_key_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['discouraged', 'preferred', 'required']):
            raise ValueError("must be one of enum values ('discouraged', 'preferred', 'required')")
        return value

    @field_validator('user_verification')
    def user_verification_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['required', 'preferred', 'discouraged']):
            raise ValueError("must be one of enum values ('required', 'preferred', 'discouraged')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiInteractionVerificationWebauthnRegistrationPost200ResponseAuthenticatorSelection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiInteractionVerificationWebauthnRegistrationPost200ResponseAuthenticatorSelection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticatorAttachment": obj.get("authenticatorAttachment"),
            "requireResidentKey": obj.get("requireResidentKey"),
            "residentKey": obj.get("residentKey"),
            "userVerification": obj.get("userVerification")
        })
        return _obj


