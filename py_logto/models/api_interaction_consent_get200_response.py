# coding: utf-8

"""
    Logto API references

    API references for Logto services.

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_logto.models.api_interaction_consent_get200_response_application import ApiInteractionConsentGet200ResponseApplication
from py_logto.models.api_interaction_consent_get200_response_organizations_inner import ApiInteractionConsentGet200ResponseOrganizationsInner
from py_logto.models.api_interaction_consent_get200_response_organizations_inner_missing_resource_scopes_inner import ApiInteractionConsentGet200ResponseOrganizationsInnerMissingResourceScopesInner
from py_logto.models.api_interaction_consent_get200_response_user import ApiInteractionConsentGet200ResponseUser
from typing import Optional, Set
from typing_extensions import Self

class ApiInteractionConsentGet200Response(BaseModel):
    """
    ApiInteractionConsentGet200Response
    """ # noqa: E501
    application: ApiInteractionConsentGet200ResponseApplication
    user: ApiInteractionConsentGet200ResponseUser
    organizations: Optional[List[ApiInteractionConsentGet200ResponseOrganizationsInner]] = None
    missing_oidc_scope: Optional[List[StrictStr]] = Field(default=None, alias="missingOIDCScope")
    missing_resource_scopes: Optional[List[ApiInteractionConsentGet200ResponseOrganizationsInnerMissingResourceScopesInner]] = Field(default=None, alias="missingResourceScopes")
    redirect_uri: StrictStr = Field(alias="redirectUri")
    __properties: ClassVar[List[str]] = ["application", "user", "organizations", "missingOIDCScope", "missingResourceScopes", "redirectUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiInteractionConsentGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in organizations (list)
        _items = []
        if self.organizations:
            for _item in self.organizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in missing_resource_scopes (list)
        _items = []
        if self.missing_resource_scopes:
            for _item in self.missing_resource_scopes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['missingResourceScopes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiInteractionConsentGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application": ApiInteractionConsentGet200ResponseApplication.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "user": ApiInteractionConsentGet200ResponseUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "organizations": [ApiInteractionConsentGet200ResponseOrganizationsInner.from_dict(_item) for _item in obj["organizations"]] if obj.get("organizations") is not None else None,
            "missingOIDCScope": obj.get("missingOIDCScope"),
            "missingResourceScopes": [ApiInteractionConsentGet200ResponseOrganizationsInnerMissingResourceScopesInner.from_dict(_item) for _item in obj["missingResourceScopes"]] if obj.get("missingResourceScopes") is not None else None,
            "redirectUri": obj.get("redirectUri")
        })
        return _obj


