# coding: utf-8

"""
    Python SDK for Logto API

    Python SDK for Logto API.  Note: This SDK is for Logto Cloud and OSS. However, if you are using Logto OSS, some features available in the SDK may not work for you. Please refer to the response of `/api/swagger.json` endpoint on your Logto OSS instance for features available to you.

    The version of the OpenAPI document: 1.22.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from py_logto.models.list_application_user_consent_scopes200_response_organization_scopes_inner import ListApplicationUserConsentScopes200ResponseOrganizationScopesInner
from py_logto.models.list_application_user_consent_scopes200_response_resource_scopes_inner import ListApplicationUserConsentScopes200ResponseResourceScopesInner
from typing import Optional, Set
from typing_extensions import Self

class ListApplicationUserConsentScopes200Response(BaseModel):
    """
    ListApplicationUserConsentScopes200Response
    """ # noqa: E501
    organization_scopes: List[ListApplicationUserConsentScopes200ResponseOrganizationScopesInner] = Field(description="A list of organization scope details assigned to the application.", alias="organizationScopes")
    resource_scopes: List[ListApplicationUserConsentScopes200ResponseResourceScopesInner] = Field(description="A list of resource scope details grouped by resource id assigned to the application.", alias="resourceScopes")
    organization_resource_scopes: List[ListApplicationUserConsentScopes200ResponseResourceScopesInner] = Field(description="A list of organization resource scope details grouped by resource id assigned to the application.", alias="organizationResourceScopes")
    user_scopes: List[StrictStr] = Field(description="A list of user scope enum value assigned to the application.", alias="userScopes")
    __properties: ClassVar[List[str]] = ["organizationScopes", "resourceScopes", "organizationResourceScopes", "userScopes"]

    @field_validator('user_scopes')
    def user_scopes_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['profile', 'email', 'phone', 'address', 'custom_data', 'identities', 'roles', 'urn:logto:scope:organizations', 'urn:logto:scope:organization_roles']):
                raise ValueError("each list item must be one of ('profile', 'email', 'phone', 'address', 'custom_data', 'identities', 'roles', 'urn:logto:scope:organizations', 'urn:logto:scope:organization_roles')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListApplicationUserConsentScopes200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in organization_scopes (list)
        _items = []
        if self.organization_scopes:
            for _item_organization_scopes in self.organization_scopes:
                if _item_organization_scopes:
                    _items.append(_item_organization_scopes.to_dict())
            _dict['organizationScopes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resource_scopes (list)
        _items = []
        if self.resource_scopes:
            for _item_resource_scopes in self.resource_scopes:
                if _item_resource_scopes:
                    _items.append(_item_resource_scopes.to_dict())
            _dict['resourceScopes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organization_resource_scopes (list)
        _items = []
        if self.organization_resource_scopes:
            for _item_organization_resource_scopes in self.organization_resource_scopes:
                if _item_organization_resource_scopes:
                    _items.append(_item_organization_resource_scopes.to_dict())
            _dict['organizationResourceScopes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListApplicationUserConsentScopes200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "organizationScopes": [ListApplicationUserConsentScopes200ResponseOrganizationScopesInner.from_dict(_item) for _item in obj["organizationScopes"]] if obj.get("organizationScopes") is not None else None,
            "resourceScopes": [ListApplicationUserConsentScopes200ResponseResourceScopesInner.from_dict(_item) for _item in obj["resourceScopes"]] if obj.get("resourceScopes") is not None else None,
            "organizationResourceScopes": [ListApplicationUserConsentScopes200ResponseResourceScopesInner.from_dict(_item) for _item in obj["organizationResourceScopes"]] if obj.get("organizationResourceScopes") is not None else None,
            "userScopes": obj.get("userScopes")
        })
        return _obj


