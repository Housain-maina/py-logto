# coding: utf-8

"""
    Logto API references

    API references for Logto services.

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from py_logto.models.list_application_organizations200_response_inner_organization_roles_inner import ListApplicationOrganizations200ResponseInnerOrganizationRolesInner
from typing import Optional, Set
from typing_extensions import Self

class GetOrganizationInvitation200Response(BaseModel):
    """
    GetOrganizationInvitation200Response
    """ # noqa: E501
    tenant_id: Annotated[str, Field(strict=True, max_length=21)] = Field(alias="tenantId")
    id: Annotated[str, Field(min_length=1, strict=True, max_length=21)]
    inviter_id: Optional[Annotated[str, Field(strict=True, max_length=21)]] = Field(alias="inviterId")
    invitee: Annotated[str, Field(min_length=1, strict=True, max_length=256)]
    accepted_user_id: Optional[Annotated[str, Field(strict=True, max_length=21)]] = Field(alias="acceptedUserId")
    organization_id: Annotated[str, Field(min_length=1, strict=True, max_length=21)] = Field(alias="organizationId")
    status: StrictStr
    created_at: Union[StrictFloat, StrictInt] = Field(alias="createdAt")
    updated_at: Union[StrictFloat, StrictInt] = Field(alias="updatedAt")
    expires_at: Union[StrictFloat, StrictInt] = Field(alias="expiresAt")
    organization_roles: List[ListApplicationOrganizations200ResponseInnerOrganizationRolesInner] = Field(alias="organizationRoles")
    __properties: ClassVar[List[str]] = ["tenantId", "id", "inviterId", "invitee", "acceptedUserId", "organizationId", "status", "createdAt", "updatedAt", "expiresAt", "organizationRoles"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Pending', 'Accepted', 'Expired', 'Revoked']):
            raise ValueError("must be one of enum values ('Pending', 'Accepted', 'Expired', 'Revoked')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOrganizationInvitation200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in organization_roles (list)
        _items = []
        if self.organization_roles:
            for _item in self.organization_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizationRoles'] = _items
        # set to None if inviter_id (nullable) is None
        # and model_fields_set contains the field
        if self.inviter_id is None and "inviter_id" in self.model_fields_set:
            _dict['inviterId'] = None

        # set to None if accepted_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_user_id is None and "accepted_user_id" in self.model_fields_set:
            _dict['acceptedUserId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOrganizationInvitation200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "id": obj.get("id"),
            "inviterId": obj.get("inviterId"),
            "invitee": obj.get("invitee"),
            "acceptedUserId": obj.get("acceptedUserId"),
            "organizationId": obj.get("organizationId"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "expiresAt": obj.get("expiresAt"),
            "organizationRoles": [ListApplicationOrganizations200ResponseInnerOrganizationRolesInner.from_dict(_item) for _item in obj["organizationRoles"]] if obj.get("organizationRoles") is not None else None
        })
        return _obj


