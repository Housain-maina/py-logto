# coding: utf-8

"""
    Python SDK for Logto API

    Python SDK for Logto API.  Note: This SDK is for Logto Cloud and OSS. However, if you are using Logto OSS, some features available in the SDK may not work for you. Please refer to the response of `/api/swagger.json` endpoint on your Logto OSS instance for features available to you.

    The version of the OpenAPI document: 1.22.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from py_logto.models.get_admin_console_config200_response_checked_charge_notification import GetAdminConsoleConfig200ResponseCheckedChargeNotification
from py_logto.models.get_admin_console_config200_response_development_tenant_migration_notification import GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification
from typing import Optional, Set
from typing_extensions import Self

class UpdateAdminConsoleConfigRequest(BaseModel):
    """
    UpdateAdminConsoleConfigRequest
    """ # noqa: E501
    sign_in_experience_customized: Optional[StrictBool] = Field(default=None, alias="signInExperienceCustomized")
    organization_created: Optional[StrictBool] = Field(default=None, alias="organizationCreated")
    development_tenant_migration_notification: Optional[GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification] = Field(default=None, alias="developmentTenantMigrationNotification")
    checked_charge_notification: Optional[GetAdminConsoleConfig200ResponseCheckedChargeNotification] = Field(default=None, alias="checkedChargeNotification")
    __properties: ClassVar[List[str]] = ["signInExperienceCustomized", "organizationCreated", "developmentTenantMigrationNotification", "checkedChargeNotification"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAdminConsoleConfigRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of development_tenant_migration_notification
        if self.development_tenant_migration_notification:
            _dict['developmentTenantMigrationNotification'] = self.development_tenant_migration_notification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of checked_charge_notification
        if self.checked_charge_notification:
            _dict['checkedChargeNotification'] = self.checked_charge_notification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAdminConsoleConfigRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "signInExperienceCustomized": obj.get("signInExperienceCustomized"),
            "organizationCreated": obj.get("organizationCreated"),
            "developmentTenantMigrationNotification": GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification.from_dict(obj["developmentTenantMigrationNotification"]) if obj.get("developmentTenantMigrationNotification") is not None else None,
            "checkedChargeNotification": GetAdminConsoleConfig200ResponseCheckedChargeNotification.from_dict(obj["checkedChargeNotification"]) if obj.get("checkedChargeNotification") is not None else None
        })
        return _obj


