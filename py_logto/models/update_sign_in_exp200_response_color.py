# coding: utf-8

"""
    Python SDK for Logto API

    Python SDK for Logto API.  Note: This SDK is for Logto Cloud and OSS. However, if you are using Logto OSS, some features available in the SDK may not work for you. Please refer to the response of `/api/swagger.json` endpoint on your Logto OSS instance for features available to you.

    The version of the OpenAPI document: 1.22.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UpdateSignInExp200ResponseColor(BaseModel):
    """
    UpdateSignInExp200ResponseColor
    """ # noqa: E501
    primary_color: Annotated[str, Field(strict=True)] = Field(alias="primaryColor")
    is_dark_mode_enabled: StrictBool = Field(alias="isDarkModeEnabled")
    dark_primary_color: Annotated[str, Field(strict=True)] = Field(alias="darkPrimaryColor")
    __properties: ClassVar[List[str]] = ["primaryColor", "isDarkModeEnabled", "darkPrimaryColor"]

    @field_validator('primary_color')
    def primary_color_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^#[\da-f]{3}([\da-f]{3})?$", value ,re.IGNORECASE):
            raise ValueError(r"must validate the regular expression /^#[\da-f]{3}([\da-f]{3})?$/i")
        return value

    @field_validator('dark_primary_color')
    def dark_primary_color_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^#[\da-f]{3}([\da-f]{3})?$", value ,re.IGNORECASE):
            raise ValueError(r"must validate the regular expression /^#[\da-f]{3}([\da-f]{3})?$/i")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSignInExp200ResponseColor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSignInExp200ResponseColor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "primaryColor": obj.get("primaryColor"),
            "isDarkModeEnabled": obj.get("isDarkModeEnabled"),
            "darkPrimaryColor": obj.get("darkPrimaryColor")
        })
        return _obj


