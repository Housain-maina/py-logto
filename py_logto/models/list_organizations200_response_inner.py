# coding: utf-8

"""
    Logto API references

    API references for Logto services.

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from py_logto.models.list_roles200_response_inner_featured_users_inner import ListRoles200ResponseInnerFeaturedUsersInner
from typing import Optional, Set
from typing_extensions import Self

class ListOrganizations200ResponseInner(BaseModel):
    """
    ListOrganizations200ResponseInner
    """ # noqa: E501
    tenant_id: Annotated[str, Field(strict=True, max_length=21)] = Field(alias="tenantId")
    id: Annotated[str, Field(min_length=1, strict=True, max_length=21)]
    name: Annotated[str, Field(min_length=1, strict=True, max_length=128)]
    description: Optional[Annotated[str, Field(strict=True, max_length=256)]]
    custom_data: Dict[str, Any] = Field(description="arbitrary", alias="customData")
    is_mfa_required: StrictBool = Field(alias="isMfaRequired")
    created_at: Union[StrictFloat, StrictInt] = Field(alias="createdAt")
    users_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="usersCount")
    featured_users: Optional[List[ListRoles200ResponseInnerFeaturedUsersInner]] = Field(default=None, alias="featuredUsers")
    __properties: ClassVar[List[str]] = ["tenantId", "id", "name", "description", "customData", "isMfaRequired", "createdAt", "usersCount", "featuredUsers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListOrganizations200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in featured_users (list)
        _items = []
        if self.featured_users:
            for _item in self.featured_users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['featuredUsers'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListOrganizations200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "customData": obj.get("customData"),
            "isMfaRequired": obj.get("isMfaRequired"),
            "createdAt": obj.get("createdAt"),
            "usersCount": obj.get("usersCount"),
            "featuredUsers": [ListRoles200ResponseInnerFeaturedUsersInner.from_dict(_item) for _item in obj["featuredUsers"]] if obj.get("featuredUsers") is not None else None
        })
        return _obj


