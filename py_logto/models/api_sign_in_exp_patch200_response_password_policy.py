# coding: utf-8

"""
    Logto API references

    API references for Logto services. To learn more about how to interact with Logto APIs, see [Interact with Management API](https://docs.logto.io/docs/recipes/interact-with-management-api/).

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from py_logto.models.api_sign_in_exp_get200_response_password_policy_character_types import ApiSignInExpGet200ResponsePasswordPolicyCharacterTypes
from py_logto.models.api_sign_in_exp_get200_response_password_policy_length import ApiSignInExpGet200ResponsePasswordPolicyLength
from py_logto.models.api_sign_in_exp_get200_response_password_policy_rejects import ApiSignInExpGet200ResponsePasswordPolicyRejects
from typing import Optional, Set
from typing_extensions import Self

class ApiSignInExpPatch200ResponsePasswordPolicy(BaseModel):
    """
    ApiSignInExpPatch200ResponsePasswordPolicy
    """ # noqa: E501
    length: Optional[ApiSignInExpGet200ResponsePasswordPolicyLength] = None
    character_types: Optional[ApiSignInExpGet200ResponsePasswordPolicyCharacterTypes] = Field(default=None, alias="characterTypes")
    rejects: Optional[ApiSignInExpGet200ResponsePasswordPolicyRejects] = None
    __properties: ClassVar[List[str]] = ["length", "characterTypes", "rejects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiSignInExpPatch200ResponsePasswordPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of length
        if self.length:
            _dict['length'] = self.length.to_dict()
        # override the default output from pydantic by calling `to_dict()` of character_types
        if self.character_types:
            _dict['characterTypes'] = self.character_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rejects
        if self.rejects:
            _dict['rejects'] = self.rejects.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiSignInExpPatch200ResponsePasswordPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "length": ApiSignInExpGet200ResponsePasswordPolicyLength.from_dict(obj["length"]) if obj.get("length") is not None else None,
            "characterTypes": ApiSignInExpGet200ResponsePasswordPolicyCharacterTypes.from_dict(obj["characterTypes"]) if obj.get("characterTypes") is not None else None,
            "rejects": ApiSignInExpGet200ResponsePasswordPolicyRejects.from_dict(obj["rejects"]) if obj.get("rejects") is not None else None
        })
        return _obj


