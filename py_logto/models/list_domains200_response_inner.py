# coding: utf-8

"""
    Python SDK for Logto API

    Python SDK for Logto API.  Note: This SDK is for Logto Cloud and OSS. However, if you are using Logto OSS, some features available in the SDK may not work for you. Please refer to the response of `/api/swagger.json` endpoint on your Logto OSS instance for features available to you.

    The version of the OpenAPI document: 1.22.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from py_logto.models.list_applications200_response_inner_protected_app_metadata_custom_domains_inner_dns_records_inner import ListApplications200ResponseInnerProtectedAppMetadataCustomDomainsInnerDnsRecordsInner
from typing import Optional, Set
from typing_extensions import Self

class ListDomains200ResponseInner(BaseModel):
    """
    ListDomains200ResponseInner
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True, max_length=21)]
    domain: Annotated[str, Field(min_length=1, strict=True, max_length=256)]
    status: StrictStr
    error_message: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(alias="errorMessage")
    dns_records: List[ListApplications200ResponseInnerProtectedAppMetadataCustomDomainsInnerDnsRecordsInner] = Field(alias="dnsRecords")
    __properties: ClassVar[List[str]] = ["id", "domain", "status", "errorMessage", "dnsRecords"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PendingVerification', 'PendingSsl', 'Active', 'Error']):
            raise ValueError("must be one of enum values ('PendingVerification', 'PendingSsl', 'Active', 'Error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListDomains200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dns_records (list)
        _items = []
        if self.dns_records:
            for _item_dns_records in self.dns_records:
                if _item_dns_records:
                    _items.append(_item_dns_records.to_dict())
            _dict['dnsRecords'] = _items
        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['errorMessage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListDomains200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "domain": obj.get("domain"),
            "status": obj.get("status"),
            "errorMessage": obj.get("errorMessage"),
            "dnsRecords": [ListApplications200ResponseInnerProtectedAppMetadataCustomDomainsInnerDnsRecordsInner.from_dict(_item) for _item in obj["dnsRecords"]] if obj.get("dnsRecords") is not None else None
        })
        return _obj


