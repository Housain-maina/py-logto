# coding: utf-8

"""
    Logto API references

    API references for Logto services.

    The version of the OpenAPI document: Cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from py_logto.models.get_jwt_customizer200_response_one_of_context_sample_user_identities_value import GetJwtCustomizer200ResponseOneOfContextSampleUserIdentitiesValue
from py_logto.models.get_jwt_customizer200_response_one_of_context_sample_user_organization_roles_inner import GetJwtCustomizer200ResponseOneOfContextSampleUserOrganizationRolesInner
from py_logto.models.get_jwt_customizer200_response_one_of_context_sample_user_profile import GetJwtCustomizer200ResponseOneOfContextSampleUserProfile
from py_logto.models.get_jwt_customizer200_response_one_of_context_sample_user_roles_inner import GetJwtCustomizer200ResponseOneOfContextSampleUserRolesInner
from py_logto.models.get_jwt_customizer200_response_one_of_context_sample_user_sso_identities_inner import GetJwtCustomizer200ResponseOneOfContextSampleUserSsoIdentitiesInner
from py_logto.models.list_application_user_consent_scopes200_response_organization_scopes_inner import ListApplicationUserConsentScopes200ResponseOrganizationScopesInner
from typing import Optional, Set
from typing_extensions import Self

class GetJwtCustomizer200ResponseOneOfContextSampleUser(BaseModel):
    """
    GetJwtCustomizer200ResponseOneOfContextSampleUser
    """ # noqa: E501
    id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=12)]] = None
    username: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    primary_email: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, alias="primaryEmail")
    primary_phone: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, alias="primaryPhone")
    name: Optional[Annotated[str, Field(strict=True, max_length=128)]] = None
    avatar: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = None
    custom_data: Optional[Dict[str, Any]] = Field(default=None, description="arbitrary", alias="customData")
    identities: Optional[Dict[str, GetJwtCustomizer200ResponseOneOfContextSampleUserIdentitiesValue]] = None
    last_sign_in_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lastSignInAt")
    created_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="createdAt")
    updated_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="updatedAt")
    profile: Optional[GetJwtCustomizer200ResponseOneOfContextSampleUserProfile] = None
    application_id: Optional[Annotated[str, Field(strict=True, max_length=21)]] = Field(default=None, alias="applicationId")
    is_suspended: Optional[StrictBool] = Field(default=None, alias="isSuspended")
    has_password: Optional[StrictBool] = Field(default=None, alias="hasPassword")
    sso_identities: Optional[List[GetJwtCustomizer200ResponseOneOfContextSampleUserSsoIdentitiesInner]] = Field(default=None, alias="ssoIdentities")
    mfa_verification_factors: Optional[List[StrictStr]] = Field(default=None, alias="mfaVerificationFactors")
    roles: Optional[List[GetJwtCustomizer200ResponseOneOfContextSampleUserRolesInner]] = None
    organizations: Optional[List[ListApplicationUserConsentScopes200ResponseOrganizationScopesInner]] = None
    organization_roles: Optional[List[GetJwtCustomizer200ResponseOneOfContextSampleUserOrganizationRolesInner]] = Field(default=None, alias="organizationRoles")
    __properties: ClassVar[List[str]] = ["id", "username", "primaryEmail", "primaryPhone", "name", "avatar", "customData", "identities", "lastSignInAt", "createdAt", "updatedAt", "profile", "applicationId", "isSuspended", "hasPassword", "ssoIdentities", "mfaVerificationFactors", "roles", "organizations", "organizationRoles"]

    @field_validator('mfa_verification_factors')
    def mfa_verification_factors_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Totp', 'WebAuthn', 'BackupCode']):
                raise ValueError("each list item must be one of ('Totp', 'WebAuthn', 'BackupCode')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetJwtCustomizer200ResponseOneOfContextSampleUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in identities (dict)
        _field_dict = {}
        if self.identities:
            for _key in self.identities:
                if self.identities[_key]:
                    _field_dict[_key] = self.identities[_key].to_dict()
            _dict['identities'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sso_identities (list)
        _items = []
        if self.sso_identities:
            for _item in self.sso_identities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ssoIdentities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organizations (list)
        _items = []
        if self.organizations:
            for _item in self.organizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organization_roles (list)
        _items = []
        if self.organization_roles:
            for _item in self.organization_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['organizationRoles'] = _items
        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if primary_email (nullable) is None
        # and model_fields_set contains the field
        if self.primary_email is None and "primary_email" in self.model_fields_set:
            _dict['primaryEmail'] = None

        # set to None if primary_phone (nullable) is None
        # and model_fields_set contains the field
        if self.primary_phone is None and "primary_phone" in self.model_fields_set:
            _dict['primaryPhone'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if avatar (nullable) is None
        # and model_fields_set contains the field
        if self.avatar is None and "avatar" in self.model_fields_set:
            _dict['avatar'] = None

        # set to None if last_sign_in_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_sign_in_at is None and "last_sign_in_at" in self.model_fields_set:
            _dict['lastSignInAt'] = None

        # set to None if application_id (nullable) is None
        # and model_fields_set contains the field
        if self.application_id is None and "application_id" in self.model_fields_set:
            _dict['applicationId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetJwtCustomizer200ResponseOneOfContextSampleUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "username": obj.get("username"),
            "primaryEmail": obj.get("primaryEmail"),
            "primaryPhone": obj.get("primaryPhone"),
            "name": obj.get("name"),
            "avatar": obj.get("avatar"),
            "customData": obj.get("customData"),
            "identities": dict(
                (_k, GetJwtCustomizer200ResponseOneOfContextSampleUserIdentitiesValue.from_dict(_v))
                for _k, _v in obj["identities"].items()
            )
            if obj.get("identities") is not None
            else None,
            "lastSignInAt": obj.get("lastSignInAt"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "profile": GetJwtCustomizer200ResponseOneOfContextSampleUserProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "applicationId": obj.get("applicationId"),
            "isSuspended": obj.get("isSuspended"),
            "hasPassword": obj.get("hasPassword"),
            "ssoIdentities": [GetJwtCustomizer200ResponseOneOfContextSampleUserSsoIdentitiesInner.from_dict(_item) for _item in obj["ssoIdentities"]] if obj.get("ssoIdentities") is not None else None,
            "mfaVerificationFactors": obj.get("mfaVerificationFactors"),
            "roles": [GetJwtCustomizer200ResponseOneOfContextSampleUserRolesInner.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "organizations": [ListApplicationUserConsentScopes200ResponseOrganizationScopesInner.from_dict(_item) for _item in obj["organizations"]] if obj.get("organizations") is not None else None,
            "organizationRoles": [GetJwtCustomizer200ResponseOneOfContextSampleUserOrganizationRolesInner.from_dict(_item) for _item in obj["organizationRoles"]] if obj.get("organizationRoles") is not None else None
        })
        return _obj


